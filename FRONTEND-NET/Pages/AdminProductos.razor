@page "/productos"
@inject IJSRuntime JSRuntime
@inject CookieService CookieService
@using System.Text.Json

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
        <meta name="description" content="" />
        <meta name="author" content="" />
        <title>Grayscale - Start Bootstrap Theme</title>
        <link rel="icon" type="image/x-icon" href="assets-main/favicon.ico" />
        <!-- Font Awesome icons (free version)-->
        <script src="https://use.fontawesome.com/releases/v6.3.0/js/all.js" crossorigin="anonymous"></script>
        <!-- Google fonts-->
        <link href="https://fonts.googleapis.com/css?family=Varela+Round" rel="stylesheet" />
        <link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet" />
        <!-- Core theme CSS (includes Bootstrap)-->
        <link href="css-main/styles.css" rel="stylesheet" />
        <style>
        .card-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr); /* 5 columnas */
            gap: 20px;
            margin: 4.5rem; /* Espacio entre las tarjetas */
        }

        .card {
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
            margin-top: 1.5rem;
            text-align: center;
        }

        .image-container {
            width: 100px; /* Ancho deseado */
            height: 100px; /* Alto deseado */
            overflow: hidden; /* Recorta cualquier parte de la imagen que exceda el contenedor */
            margin: 0 auto; /* Centra el contenedor horizontalmente dentro del card */
        }

        /* Estilo para la imagen */
        .image-container img {
            width: 100%; /* Asegura que la imagen llene el contenedor */
            height: 100%; /* Asegura que la imagen llene el contenedor */
            object-fit: cover; /* Ajusta la imagen para llenar el contenedor */
        }
    </style>
    </head>
    <body id="page-top" style="margin: 0;">
        <nav class="navbar navbar-expand-lg navbar-light fixed-top bg-white" id="mainNav">
            <div class="container px-4 px-lg-5">
                <a class="navbar-brand text-black" href="/">Regresar</a>
                <button class="navbar-toggler navbar-toggler-right" type="button" data-bs-toggle="collapse" data-bs-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
                    Menu
                    <i class="fas fa-bars"></i>
                </button>
            </div>
        </nav>
        
        <header class="masthead">
        
        <div class="card-grid mt-5">
        
            <!-- Tarjeta 1 -->
            @if (productos != null && productos.Any())
            {
                @foreach (var producto in productos)
                {
                    <div class="card">
                        <div class="image-container">
                            <img src="data:image/jpeg;base64,@producto.imagen" alt="Producto">
                        </div>
                        <h2>@producto.nombre</h2>
                        <p>S/ @producto.precio.ToString()</p>
                        <a class="btn btn-primary" href="/productos/@producto.id">
                            Detalles
                        </a>
                    </div>
                }
            }
            else
            {
                <p>Cargando productos...</p>
            }
            

        </div>
        <a class="btn btn-primary" href="/productos/createProduct" style="display: flex; justify-content: center; align-items: center; margin-left: 4.5rem; margin-right: 4.5rem; margin-top: 4.5rem;">
            Crear Producto
        </a>
        </header>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
        <!-- Core theme JS-->
        <script src="js-main/scripts.js"></script>
        <!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
        <!-- * *                               SB Forms JS                               * *-->
        <!-- * * Activate your form at https://startbootstrap.com/solution/contact-forms * *-->
        <!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
        <script src="https://cdn.startbootstrap.com/sb-forms-latest.js"></script>
    </body>
</html>

@code{
    private int? cookieValue;
    private string comp;
    private string nombre;
    private double precio;
    private string userJson;
    private string errorMessage;
    private string imagen;
    private List<Producto> productos = new List<Producto>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            comp = await CookieService.ReadCookieValue(JSRuntime);
            cookieValue = await CookieService.ReadUserCookie(JSRuntime);
            await AsignInformation();
            StateHasChanged();
        }
        
    }

    public async Task AsignInformation(){
        try
        {
            // Aquí haces la llamada a tu API para obtener los datos del usuario
            var client = new HttpClient();
            var response = await client.GetAsync($"http://localhost:5086/api/productos/{cookieValue}/user");
                
            if (response.IsSuccessStatusCode)
            {
                // Si la llamada es exitosa, obtén el JSON de respuesta como una cadena
                userJson = await response.Content.ReadAsStringAsync();
                productos = JsonSerializer.Deserialize<List<Producto>>(userJson);
            }
            else
            {
                Console.WriteLine("La solicitud no fue exitosa. Código de estado: " + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("error"+ ex.Message);
            errorMessage = "Error al obtener los datos del usuario: " + ex.Message;
        }
    }
    
    public class Producto
    {
        public int id { get; set; }
        public string nombre { get; set; }
        public double precio { get; set; }
        public string imagen { get; set; }
    }
}